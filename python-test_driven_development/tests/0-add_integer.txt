>>> add_integer = __import__('0-add_integer').add_integer


>>> print(add_integer(1, 2))
3
>>> print(add_integer(100, -2))
98
>>> print(add_integer(2))
100
>>> print(add_integer(0))
98
>>> print(add_integer(-1))
97
>>> print(add_integer(-200))
-102
>>> print(add_integer(100.3, -2))
98
>>> print(add_integer(4, "School"))
Traceback (most recent call last):
  File "./0-add_integer.py", line 40, in <module>
    print(add_integer(4, "School"))
  File "./0-add_integer.py", line 27, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> print(add_integer(None))
Traceback (most recent call last):
  File "./0-add_integer.py", line 40, in <module>
    print(add_integer(4, "School"))
  File "./0-add_integer.py", line 27, in add_integer
    raise TypeError("b must be an integer")
TypeError: a must be an integer
>>> x = 1.0e1000
>>> print(add_integer(x, -2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: cannot convert float infinity to integer
>>> x = float('inf')
>>> print(add_integer(x, -2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
OverflowError: cannot convert float infinity to integer
>>> x = float('nan')
>>> print(add_integer(x, -2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: cannot convert float NaN to integer
